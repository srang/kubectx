#!/usr/bin/env bash
#
# ocns(1) is a utility to switch between OpenShift namespaces.

# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'

OCNS_DIR="${HOME}/.kube/ocns"

usage() {
  cat <<"EOF"
USAGE:
  ocns                    : list the namespaces in the current context
  ocns <NAME>             : change the active namespace of current context
  ocns -                  : switch to the previous namespace in this context
  ocns -h,--help          : show this message
EOF
  exit 1
}

current_namespace() {
  local cur_ctx
  cur_ctx="$(current_context)"
  ns="$(oc config view -o=jsonpath="{.contexts[?(@.name==\"${cur_ctx}\")].context.namespace}")"
  if [[ -z "${ns}" ]]; then
    echo "default"
  else
    echo "${ns}"
  fi
}

current_context() {
  oc config view -o=jsonpath='{.current-context}'
}

get_namespaces() {
  oc get namespaces -o=jsonpath='{range .items[*].metadata.name}{@}{"\n"}{end}'
}

escape_context_name() {
  echo "${1//\//-}"
}

namespace_file() {
  local ctx="$(escape_context_name "${1}")"
  echo "${OCNS_DIR}/${ctx}"
}

read_namespace() {
  local f
  f="$(namespace_file "${1}")"
  [[ -f "${f}" ]] && cat "${f}"
  return 0
}

save_namespace() {
  mkdir -p "${OCNS_DIR}"
  local f saved
  f="$(namespace_file "${1}")"
  saved="$(read_namespace "${1}")"

  if [[ "${saved}" != "${2}" ]]; then
    printf %s "${2}" > "${f}"
  fi
}

switch_namespace() {
  local ctx="${1}"
  oc config set-context "${ctx}" --namespace="${2}"
  echo "Active namespace is \"${2}\".">&2
}

set_namespace() {
  local ctx prev
  ctx="$(current_context)"
  prev="$(current_namespace)"

  if grep -q ^"${1}"\$ <(get_namespaces); then
    switch_namespace "${ctx}" "${1}"

    if [[ "${prev}" != "${1}" ]]; then
      save_namespace "${ctx}" "${prev}"
    fi
  else
    echo "error: no namespace exists with name \"${1}\".">&2
    exit 1
  fi
}

list_namespaces() {
  local yellow darkbg normal
  yellow=$(tput setaf 3)
  darkbg=$(tput setab 0)
  normal=$(tput sgr0)

  local cur_ctx_fg cur_ctx_bg
  cur_ctx_fg=${OCTX_CURRENT_FGCOLOR:-$yellow}
  cur_ctx_bg=${OCTX_CURRENT_BGCOLOR:-$darkbg}

  local cur ns_list
  cur="$(current_namespace)"
  ns_list=$(get_namespaces)
  for c in $ns_list; do
    if [[ -t 1 && -z "${NO_COLOR:-}" && "${c}" = "${cur}" ]]; then
      echo "${cur_ctx_bg}${cur_ctx_fg}${c}${normal}"
    else
      echo "${c}"
    fi
  done
}

swap_namespace() {
  local ctx ns
  ctx="$(current_context)"
  ns="$(read_namespace "${ctx}")"
  if [[ -z "${ns}" ]]; then
    echo "error: No previous namespace found for current context." >&2
    exit 1
  fi
  set_namespace "${ns}"
}

main() {
  if [[ "$#" -eq 0 ]]; then
    list_namespaces
  elif [[ "$#" -eq 1 ]]; then
    if [[ "${1}" == '-h' || "${1}" == '--help' ]]; then
      usage
    elif [[ "${1}" == "-" ]]; then
      swap_namespace
    elif [[ "${1}" =~ ^-(.*) ]]; then
      echo "error: unrecognized flag \"${1}\"" >&2
      usage
    elif [[ "${1}" =~ (.+)=(.+) ]]; then
      alias_context "${BASH_REMATCH[2]}" "${BASH_REMATCH[1]}"
    else
      set_namespace "${1}"
    fi
  else
    echo "error: too many flags" >&2
    usage
  fi
}

main "$@"
